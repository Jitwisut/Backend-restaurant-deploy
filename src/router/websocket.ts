import { Elysia, t } from "elysia";
import type { ServerWebSocket } from "bun";

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö role
type Role = "user" | "kitchen";

// ‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WebSocket ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° role
const sockets: Record<Role, Map<string, ServerWebSocket<any>>> = {
  user: new Map(),
  kitchen: new Map(),
};

// ‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏° role ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
interface Client {
  ws: ServerWebSocket;
  role: Role;
}
const clients = new Map<string, Client>();

export const web = (app: Elysia) => {
  return app.ws("/ws/:user", {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö query parameter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö role
    query: t.Object({
      role: t.Union([t.Literal("user"), t.Literal("kitchen")], {
        default: "user",
      }),
    }),

    open(ws) {
      const username = ws.data.params.user;
      const role = ws.data.query.role as Role;

      // ‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏ô sockets ‡πÅ‡∏•‡∏∞ clients
      sockets[role].set(username, (ws as any).raw);
      clients.set(username, { ws: (ws as any).raw, role });
      console.log(`üëã ${username} (${role}) connected`);

      // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      ws.send(
        JSON.stringify({
          type: "system",
          message: `‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠ ${username} (Role: ${role})`,
        })
      );
    },

    message(ws, msg) {
      const username = ws.data.params.user;
      const sender = clients.get(username);
      if (!sender) {
        ws.send(
          JSON.stringify({
            type: "error",
            message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠",
          })
        );
        return;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ msg ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON
      let parsedMsg;
      try {
        parsedMsg = typeof msg === "string" ? JSON.parse(msg) : msg;
      } catch (e) {
        ws.send(
          JSON.stringify({
            type: "error",
            message: "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
          })
        );
        return;
      }

      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
      if (typeof parsedMsg === "object" && parsedMsg.type) {
        if (
          parsedMsg.type === "order" &&
          parsedMsg.menu &&
          sender.role === "user"
        ) {
          // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏∏‡∏Å kitchen)
          const { menu } = parsedMsg;

          // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏∏‡∏Å kitchen
          const kitchenClients = Array.from(sockets.kitchen.entries());

          if (kitchenClients.length > 0) {
            // ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏∏‡∏Å kitchen
            kitchenClients.forEach(([kitchenUsername, kitchenWs]) => {
              kitchenWs.send(
                JSON.stringify({
                  type: "order",
                  from: username,
                  menu,
                  timestamp: new Date().toISOString(),
                })
              );
            });

            // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á (user)
            ws.send(
              JSON.stringify({
                type: "system",
                message: `‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ñ‡∏£‡∏±‡∏ß‡πÅ‡∏•‡πâ‡∏ß`,
                menu,
                timestamp: new Date().toISOString(),
              })
            );
          } else {
            ws.send(
              JSON.stringify({
                type: "error",
                message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà",
              })
            );
          }
        } else if (
          parsedMsg.type === "message" &&
          parsedMsg.to &&
          parsedMsg.content
        ) {
          // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
          const { to, content } = parsedMsg;
          const recipient = clients.get(to);

          if (recipient) {
            recipient.ws.send(
              JSON.stringify({
                type: "message",
                from: username,
                content,
                timestamp: new Date().toISOString(),
              })
            );

            ws.send(
              JSON.stringify({
                type: "system",
                message: `‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏∂‡∏á ${to} ‡πÅ‡∏•‡πâ‡∏ß`,
                content,
                timestamp: new Date().toISOString(),
              })
            );
          } else {
            ws.send(
              JSON.stringify({
                type: "error",
                message: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${to} ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠`,
              })
            );
          }
        } else {
          ws.send(
            JSON.stringify({
              type: "error",
              message:
                "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏ä‡πâ { type: 'message', to: 'username', content: '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°' } ‡∏´‡∏£‡∏∑‡∏≠ { type: 'order', menu: {...} }",
            })
          );
        }
      } else {
        ws.send(
          JSON.stringify({
            type: "error",
            message: "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ type ‡πÅ‡∏•‡∏∞‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
          })
        );
      }
    },

    close(ws) {
      const username = ws.data.params.user;
      const client = clients.get(username);
      if (client) {
        // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å sockets ‡πÅ‡∏•‡∏∞ clients
        sockets[client.role].delete(username);
        clients.delete(username);
        console.log(`üö™ ${username} (${client.role}) disconnected`);
      }
    },
  });
};
